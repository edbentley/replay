(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return d})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),i=(n(0),n(159)),o=n(167),s=n(168),l={id:"ios",title:"iOS"},c={unversionedId:"ios",id:"ios",isDocsHomePage:!1,title:"iOS",description:"Swift Package",source:"@site/docs/ios.md",slug:"/ios",permalink:"/docs/ios",editUrl:"https://github.com/edbentley/replay/edit/master/website/docs/ios.md",version:"current",sidebar:"someSidebar",previous:{title:"Web",permalink:"/docs/web"},next:{title:"Android",permalink:"/docs/android"}},d=[{value:"Swift Package",id:"swift-package",children:[{value:"<code>ReplayViewController(hideStatusBar)</code>",id:"replayviewcontrollerhidestatusbar",children:[]}]},{value:"Inputs",id:"inputs",children:[]},{value:"Bridge",id:"bridge",children:[{value:"JS side",id:"js-side",children:[]},{value:"Swift side",id:"swift-side",children:[]}]}],u={toc:d};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"swift-package"},"Swift Package"),Object(i.b)("p",null,"The Replay Swift package is ",Object(i.b)("a",{parentName:"p",href:"https://github.com/edbentley/replay-swift"},"hosted on GitHub"),". Once ",Object(i.b)("a",{parentName:"p",href:"https://developer.apple.com/documentation/xcode/adding_package_dependencies_to_your_app"},"added as a package dependency")," to your Xcode project, you can replace the ",Object(i.b)("inlineCode",{parentName:"p"},"rootViewController"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift",metastring:"{1,8}","{1,8}":!0},"import Replay\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        if let windowScene = scene as? UIWindowScene {\n            let window = UIWindow(windowScene: windowScene)\n            window.rootViewController = ReplayViewController()\n            self.window = window\n            window.makeKeyAndVisible()\n        }\n    }\n\n}\n")),Object(i.b)("p",null,"Your image and audio assets also need to be added to your Xcode project. See ",Object(i.b)("a",{parentName:"p",href:"/docs/starter"},"Replay Starter")," for an example setup."),Object(i.b)("h3",{id:"replayviewcontrollerhidestatusbar"},Object(i.b)("inlineCode",{parentName:"h3"},"ReplayViewController(hideStatusBar)")),Object(i.b)("h4",{id:"parameters"},"Parameters"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"hideStatusBar"),": (Optional) A boolean to set if the status bar is hidden or not. Default ",Object(i.b)("inlineCode",{parentName:"li"},"true"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"userStyles"),": (Optional) CSS code which will be injected into the web view. Useful for defining custom fonts."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"jsRun"),": (Optional) The JS code that starts the game - can be overridden to load assets before starting game. Default ",Object(i.b)("inlineCode",{parentName:"li"},'"renderCanvas.run();"'),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"onJsCallback"),": (Optional) A callback for messages sent from your game. See ",Object(i.b)("a",{parentName:"li",href:"#bridge"},"Bridge"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"webWorkerFiles"),": (Optional) An array of additional Web Worker JS file names (without ",Object(i.b)("inlineCode",{parentName:"li"},".js")," extension) to load (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},'["file1", "file2"]'),").")),Object(i.b)("h4",{id:"methods"},"Methods"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"jsBridge(messageId: String, jsArg: String)"),": Send a value from Swift to your JS game code. See ",Object(i.b)("a",{parentName:"li",href:"#bridge"},"Bridge"),".")),Object(i.b)("h2",{id:"inputs"},"Inputs"),Object(i.b)("p",null,"Since Replay Swift embeds your game as a web view, the ",Object(i.b)("inlineCode",{parentName:"p"},"device.inputs")," parameter of Sprite methods is an alias of the ",Object(i.b)("a",{parentName:"p",href:"/docs/web"},"Web package"),"'s inputs:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"type iOSInputs = WebInputs;\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@replay/swift")," package exports this type for TypeScript projects."),Object(i.b)("h2",{id:"bridge"},"Bridge"),Object(i.b)("p",null,"You can send asynchronous messages from your game's JS code to your Swift code, and then respond back using a Promise. This allows you to use native features like in-app purchases."),Object(i.b)("h3",{id:"js-side"},"JS side"),Object(i.b)(o.a,{defaultValue:"js",groupId:"code",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'import { makeSprite } from "@replay/core";\nimport { swiftBridge } from "@replay/swift";\n\nexport const BridgeSprite = makeSprite({\n  init({ device }) {\n    swiftBridge({\n      // This should be unique between parallel messages\n      id: "TestBridge",\n      // A string to send\n      message: "Hello!",\n    }).then((message) => {\n      // message is a value sent back from Swift code.\n      // This will log "Bridge response: Hi!"\n      device.log(`Bridge response: ${message.response}`);\n    });\n  },\n  render() {\n    return [];\n  },\n});\n'))),Object(i.b)(s.a,{value:"ts",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},'import { makeSprite } from "@replay/core";\nimport { swiftBridge } from "@replay/swift";\n\nexport const BridgeSprite = makeSprite<{}>({\n  init({ device }) {\n    // Set the type here to match what you send in Swift code\n    swiftBridge<{ response: string }>({\n      // This should be unique between parallel messages\n      id: "TestBridge",\n      // A string to send\n      message: "Hello!",\n    }).then((message) => {\n      // message is a value sent back from Swift code.\n      // This will log "Bridge response: Hi!"\n      device.log(`Bridge response: ${message.response}`);\n    });\n    return undefined;\n  },\n  render() {\n    return [];\n  },\n});\n')))),Object(i.b)("h3",{id:"swift-side"},"Swift side"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-swift"},'        var vc: ReplayViewController!\n        vc = ReplayViewController(onJsCallback: { (message) in\n            if (message == "Hello!") {\n                // Here you can call native APIs\n                let myApiVal = "Hi!"\n\n                vc.jsBridge(\n                    // This should match the id above\n                    messageId: "TestBridge",\n                    // The return value of the Promise in JS code.\n                    // Use a String which will be evaluated as JS code (like eval)\n                    jsArg: "{ response: `\\(myApiVal)` }"\n                )\n            }\n        })\n')))}p.isMDXComponent=!0},159:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),d=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),b=r,m=u["".concat(o,".").concat(b)]||u[b]||p[b]||i;return n?a.a.createElement(m,s(s({ref:t},c),{},{components:n})):a.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},167:function(e,t,n){"use strict";var r=n(0),a=n.n(r),i=n(176),o=n(169),s=n(57),l=n.n(s),c=37,d=39;t.a=function(e){var t=e.lazy,n=e.block,s=e.defaultValue,u=e.values,p=e.groupId,b=e.className,m=Object(i.a)(),f=m.tabGroupChoices,g=m.setTabGroupChoices,O=Object(r.useState)(s),h=O[0],j=O[1],w=r.Children.toArray(e.children);if(null!=p){var y=f[p];null!=y&&y!==h&&u.some((function(e){return e.value===y}))&&j(y)}var v=function(e){j(e),null!=p&&g(p,e)},S=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":n},b)},u.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":h===t,className:Object(o.a)("tabs__item",l.a.tabItem,{"tabs__item--active":h===t}),key:t,ref:function(e){return S.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case d:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case c:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(S,e.target,e)},onFocus:function(){return v(t)},onClick:function(){v(t)}},n)}))),t?Object(r.cloneElement)(w.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},w.map((function(e,t){return Object(r.cloneElement)(e,{key:t,hidden:e.props.value!==h})}))))}},168:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function(e){var t=e.children,n=e.hidden,r=e.className;return a.a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},169:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},176:function(e,t,n){"use strict";var r=n(0),a=n(178);t.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},178:function(e,t,n){"use strict";var r=n(0),a=Object(r.createContext)(void 0);t.a=a}}]);