(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{158:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=a.a.createContext({}),l=function(e){var t=a.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},p=function(e){var t=l(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,d=p["".concat(c,".").concat(m)]||p[m]||b[m]||o;return n?a.a.createElement(d,u(u({ref:t},i),{},{components:n})):a.a.createElement(d,u({ref:t},i))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:r,c[1]=u;for(var i=2;i<o;i++)c[i]=n[i];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},164:function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=n(174),c=n(166),u=n(57),s=n.n(u),i=37,l=39;t.a=function(e){var t=e.lazy,n=e.block,u=e.defaultValue,p=e.values,b=e.groupId,m=e.className,d=Object(o.a)(),f=d.tabGroupChoices,x=d.setTabGroupChoices,y=Object(r.useState)(u),v=y[0],j=y[1],O=r.Children.toArray(e.children);if(null!=b){var h=f[b];null!=h&&h!==v&&p.some((function(e){return e.value===h}))&&j(h)}var g=function(e){j(e),null!=b&&x(b,e)},C=[];return a.a.createElement("div",null,a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":n},m)},p.map((function(e){var t=e.value,n=e.label;return a.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":v===t,className:Object(c.a)("tabs__item",s.a.tabItem,{"tabs__item--active":v===t}),key:t,ref:function(e){return C.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case l:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case i:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(C,e.target,e)},onFocus:function(){return g(t)},onClick:function(){g(t)}},n)}))),t?Object(r.cloneElement)(O.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},O.map((function(e,t){return Object(r.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}},165:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function(e){var t=e.children,n=e.hidden,r=e.className;return a.a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},166:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},174:function(e,t,n){"use strict";var r=n(0),a=n(175);t.a=function(){var e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},175:function(e,t,n){"use strict";var r=n(0),a=Object(r.createContext)(void 0);t.a=a},218:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/context-props-442970e69fc35331b5970fb5ae5b8182.png"},219:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/context-61481ec168dd39fe74b0c239b8b246b1.png"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),o=(n(0),n(158)),c=n(164),u=n(165),s={id:"context",title:"Context"},i={unversionedId:"context",id:"context",isDocsHomePage:!1,title:"Context",description:"If you have a value in a Sprite which is also needed in a very nested Sprite, you need to add that prop to all of the intermediate Sprites.",source:"@site/docs/context.md",slug:"/context",permalink:"/docs/context",editUrl:"https://github.com/edbentley/replay/edit/master/website/docs/context.md",version:"current",sidebar:"someSidebar",previous:{title:"Mask",permalink:"/docs/mask"},next:{title:"Pure Sprites",permalink:"/docs/pure-sprites"}},l=[],p={toc:l};function b(e){var t=e.components,s=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,s,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"If you have a value in a Sprite which is also needed in a very nested Sprite, you need to add that prop to all of the intermediate Sprites."),Object(o.b)("p",null,Object(o.b)("img",{alt:"props diagram",src:n(218).default})),Object(o.b)("p",null,"Context avoids this by setting up a context value which can be accessed by any nested Sprite, without having to manually pass through props."),Object(o.b)("p",null,Object(o.b)("img",{alt:"context diagram",src:n(219).default})),Object(o.b)("p",null,"This can be especially useful for 'global' props you need in many Sprites in your game - e.g. player controller settings or the login state of an online game."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Context is very much inspired by ",Object(o.b)("a",{parentName:"p",href:"https://reactjs.org/docs/context.html"},"React Context")," and works the same way, but the API is slightly different.")),Object(o.b)("p",null,"You can create a Context with the ",Object(o.b)("inlineCode",{parentName:"p"},"makeContext")," function:"),Object(o.b)(c.a,{defaultValue:"js",groupId:"code",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},Object(o.b)(u.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'import { makeContext } from "@replay/core";\n\nconst themeContext = makeContext();\n'))),Object(o.b)(u.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'import { makeContext } from "@replay/core";\n\ntype ThemeContext = {\n  theme: string;\n};\nconst themeContext = makeContext<ThemeContext>();\n')))),Object(o.b)("p",null,"You then return a ",Object(o.b)("inlineCode",{parentName:"p"},"context.Sprite")," where you want to set this context. Only the Sprites in the ",Object(o.b)("inlineCode",{parentName:"p"},"sprites")," prop have access to the context:"),Object(o.b)(c.a,{defaultValue:"js",groupId:"code",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},Object(o.b)(u.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'import { makeSprite } from "@replay/core";\n\nconst ThemeSprite = makeSprite({\n  render() {\n    return [\n      themeContext.Sprite({\n        context: {\n          theme: "red",\n        },\n        sprites: [\n          // Only these sprites (and any nested sprites) have access to the context\n          Button({ id: "Button" }),\n        ],\n      }),\n    ];\n  },\n});\n'))),Object(o.b)(u.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'import { makeSprite } from "@replay/core";\n\nconst ThemeSprite = makeSprite<{}>({\n  render() {\n    return [\n      themeContext.Sprite({\n        context: {\n          theme: "red",\n        },\n        sprites: [\n          // Only these sprites (and any nested sprites) have access to the context\n          Button({ id: "Button" }),\n        ],\n      }),\n    ];\n  },\n});\n')))),Object(o.b)("p",null,"The Context value can be read in nested Sprites using the ",Object(o.b)("inlineCode",{parentName:"p"},"getContext")," Sprite method:"),Object(o.b)(c.a,{defaultValue:"js",groupId:"code",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},Object(o.b)(u.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'import { t, makeSprite } from "@replay/core";\n\nconst Button = makeSprite({\n  render({ getContext }) {\n    const { theme } = getContext(countContext);\n\n    return [\n      t.text({\n        text: "Test",\n        color: theme,\n      }),\n    ];\n  },\n});\n'))),Object(o.b)(u.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'import { t, makeSprite } from "@replay/core";\n\nconst Button = makeSprite<{}>({\n  render({ getContext }) {\n    const { theme } = getContext(countContext);\n\n    return [\n      t.text({\n        text: "Test",\n        color: theme,\n      }),\n    ];\n  },\n});\n')))),Object(o.b)("p",null,"You can pass any values you want into the ",Object(o.b)("inlineCode",{parentName:"p"},"context")," prop. You can even pass in state with callbacks for your nested Sprites:"),Object(o.b)(c.a,{defaultValue:"js",groupId:"code",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},Object(o.b)(u.a,{value:"js",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-js"},'const counterContext = makeContext();\n\nconst Game = makeSprite({\n  init() {\n    return { count: 0 };\n  },\n\n  render({ state, updateState }) {\n    return [\n      counterContext.Sprite({\n        context: {\n          count: state.count,\n          increaseCount: () => {\n            updateState((prevState) => ({\n              ...prevState,\n              count: prevState.count + 1,\n            }));\n          },\n        },\n        sprites: [Button({ id: "Button" })],\n      }),\n    ];\n  },\n});\n\nconst Button = makeSprite({\n  loop({ getInputs, getContext }) {\n    if (getInputs().pointer.justPressed) {\n      const { increaseCount } = getContext(counterContext);\n      increaseCount();\n    }\n  },\n\n  render({ getContext }) {\n    const { count } = getContext(counterContext);\n    return [\n      t.text({\n        text: `Count: ${count}`,\n        color: "black",\n      }),\n    ];\n  },\n});\n'))),Object(o.b)(u.a,{value:"ts",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-ts"},'type CounterContext = {\n  count: number;\n  increaseCount: () => void;\n};\nconst counterContext = makeContext<CounterContext>();\n\nconst Game = makeSprite<GameProps, { count: number }>({\n  init() {\n    return { count: 0 };\n  },\n\n  render({ state, updateState }) {\n    return [\n      counterContext.Sprite({\n        context: {\n          count: state.count,\n          increaseCount: () => {\n            updateState((prevState) => ({\n              ...prevState,\n              count: prevState.count + 1,\n            }));\n          },\n        },\n        sprites: [Button({ id: "Button" })],\n      }),\n    ];\n  },\n});\n\nconst Button = makeSprite<{}, undefined, WebInputs>({\n  loop({ getInputs, getContext }) {\n    if (getInputs().pointer.justPressed) {\n      const { increaseCount } = getContext(counterContext);\n      increaseCount();\n    }\n    return undefined;\n  },\n\n  render({ getContext }) {\n    const { count } = getContext(counterContext);\n    return [\n      t.text({\n        text: `Count: ${count}`,\n        color: "black",\n      }),\n    ];\n  },\n});\n')))))}b.isMDXComponent=!0}}]);