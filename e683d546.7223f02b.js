(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{159:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),s=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,f=u["".concat(a,".").concat(d)]||u[d]||b[d]||i;return n?o.a.createElement(f,c(c({ref:t},p),{},{components:n})):o.a.createElement(f,c({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var p=2;p<i;p++)a[p]=n[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var r=n(3),o=n(7),i=(n(0),n(159)),a={},c={unversionedId:"tutorial/15",id:"tutorial/15",isDocsHomePage:!1,title:"15",description:"15 - Collision Detection",source:"@site/docs/tutorial/15.md",slug:"/tutorial/15",permalink:"/docs/tutorial/15",editUrl:"https://github.com/edbentley/replay/edit/master/website/docs/tutorial/15.md",version:"current"},l=[],p={toc:l};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"15---collision-detection"},"15 - Collision Detection"),Object(i.b)("p",null,"Next we need to add some collision detection to see if the bird hit a pipe or fell off the bottom of the screen."),Object(i.b)("p",null,"We'll add a callback prop ",Object(i.b)("inlineCode",{parentName:"p"},"gameOver")," in the ",Object(i.b)("inlineCode",{parentName:"p"},"Level")," Sprite which can return us to the main menu. Then in the ",Object(i.b)("inlineCode",{parentName:"p"},"loop")," method we call it when the ",Object(i.b)("inlineCode",{parentName:"p"},"didHitPipe")," function returns ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"."),Object(i.b)("p",null,"In Replay one way of performing collision detection is by checking if a point is within a rectangle, like the ",Object(i.b)("inlineCode",{parentName:"p"},"pointInRect")," function defined at the bottom of the ",Object(i.b)("inlineCode",{parentName:"p"},"level")," file does."),Object(i.b)("p",null,"In ",Object(i.b)("inlineCode",{parentName:"p"},"didHitPipe")," we essentially choose a few points around the shape of the bird, and see if any of those are inside one of the pipe rectangles - if so, it's a hit! For simplicity, this function doesn't account for the bird's rotation; as an exercise, feel free to try to add that for a more accurate hit detection."),Object(i.b)("p",null,"We update our top-level ",Object(i.b)("inlineCode",{parentName:"p"},"Game")," Sprite to change its view state to ",Object(i.b)("inlineCode",{parentName:"p"},'"menu"')," in the ",Object(i.b)("inlineCode",{parentName:"p"},"gameOver")," callback prop."),Object(i.b)("p",null,"You'll also see an ",Object(i.b)("inlineCode",{parentName:"p"},"attempt")," count added in the state. Even though we don't display this, it's a neat hack to force the ",Object(i.b)("inlineCode",{parentName:"p"},"Level")," to reset its state whenever we start again by changing its ",Object(i.b)("inlineCode",{parentName:"p"},"id")," prop. Replay uses the ",Object(i.b)("inlineCode",{parentName:"p"},"id")," to track state between Sprites (which is why it has to be unique locally), but we can also use that to reset a Sprite's state."))}s.isMDXComponent=!0}}]);