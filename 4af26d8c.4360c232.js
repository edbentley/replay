(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{141:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),d=a,m=b["".concat(o,".").concat(d)]||b[d]||u[d]||i;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},148:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(157),o=n(154),l=n(49),s=n.n(l),c=37,p=39;t.a=function(e){var t=e.block,n=e.children,l=e.defaultValue,b=e.values,u=e.groupId,d=Object(i.a)(),m=d.tabGroupChoices,j=d.setTabGroupChoices,O=Object(a.useState)(l),f=O[0],h=O[1],g=Object(a.useState)(!1),y=g[0],x=g[1];if(null!=u){var N=m[u];null!=N&&N!==f&&b.some((function(e){return e.value===N}))&&h(N)}var v=function(e){h(e),null!=u&&j(u,e)},w=[],C=function(e){e.metaKey||e.altKey||e.ctrlKey||x(!0)},T=function(){x(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",C),window.addEventListener("mousedown",T)}),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(o.a)("tabs",{"tabs--block":t})},b.map((function(e){var t=e.value,n=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===t,className:Object(o.a)("tabs__item",s.a.tabItem,{"tabs__item--active":f===t}),style:y?{}:{outline:"none"},key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case p:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case c:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e),C(e)},onFocus:function(){return v(t)},onClick:function(){v(t),x(!1)},onPointerDown:function(){return x(!1)}},n)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter((function(e){return e.props.value===f}))[0]))}},149:function(e,t,n){"use strict";var a=n(0),r=n.n(a);t.a=function(e){return r.a.createElement("div",null,e.children)}},154:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},157:function(e,t,n){"use strict";var a=n(0),r=n(159);t.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},159:function(e,t,n){"use strict";var a=n(0),r=Object(a.createContext)(void 0);t.a=r},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(6),i=(n(0),n(141)),o=n(148),l=n(149),s={id:"test",title:"Replay Test"},c={unversionedId:"test",id:"test",isDocsHomePage:!1,title:"Replay Test",description:"Once you've worked on your game for a while, it's a good idea to add some tests to avoid things breaking in the future. It gives you the confidence to keep publishing new updates!",source:"@site/docs/test.md",permalink:"/docs/test",editUrl:"https://github.com/edbentley/replay/edit/master/website/docs/test.md",sidebar:"someSidebar",previous:{title:"Pure Sprites",permalink:"/docs/pure-sprites"},next:{title:"Web",permalink:"/docs/web"}},p=[{value:"<code>testSprite(sprite, gameProps, options)</code>",id:"testspritesprite-gameprops-options",children:[{value:"<code>nextFrame()</code>",id:"nextframe",children:[]},{value:"<code>jumpToFrame(condition, maxFrames)</code>",id:"jumptoframecondition-maxframes",children:[]},{value:"<code>loadFiles()</code>",id:"loadfiles",children:[]},{value:"<code>setRandomNumbers(array)</code>",id:"setrandomnumbersarray",children:[]},{value:"<code>updateInputs(inputs)</code>",id:"updateinputsinputs",children:[]},{value:"<code>getTextures()</code>",id:"gettextures",children:[]},{value:"<code>getTexture(testId)</code>",id:"gettexturetestid",children:[]},{value:"<code>textureExists(testId)</code>",id:"textureexiststestid",children:[]},{value:"<code>getByText(text)</code>",id:"getbytexttext",children:[]},{value:"<code>log</code>",id:"log",children:[]},{value:"<code>audio</code>",id:"audio",children:[]},{value:"<code>network</code>",id:"network",children:[]},{value:"<code>store</code>",id:"store",children:[]},{value:"<code>alert</code>",id:"alert",children:[]},{value:"<code>updateAlertResponse(isOk)</code>",id:"updatealertresponseisok",children:[]},{value:"<code>clipboard</code>",id:"clipboard",children:[]}]},{value:"Example",id:"example",children:[]}],b={rightToc:p};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Once you've worked on your game for a while, it's a good idea to add some tests to avoid things breaking in the future. It gives you the confidence to keep publishing new updates!"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"@replay/test")," package is useful for writing tests in Jest for your Replay game. It provides a test platform, which works the same as any other like ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/web"}),"web")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/ios"}),"iOS"),", but returns helpful utility functions for testing."),Object(i.b)("h2",{id:"testspritesprite-gameprops-options"},Object(i.b)("inlineCode",{parentName:"h2"},"testSprite(sprite, gameProps, options)")),Object(i.b)("h4",{id:"parameters"},"Parameters"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"sprite"),": The Sprite you want to test called with its props, e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"Player(playerProps)"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"gameProps"),": The props defined for your top-level ",Object(i.b)("inlineCode",{parentName:"li"},"Game"),". This sets the device size during tests."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"options"),": (Optional) An object with the following properties:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"initInputs"),": (Optional) The inputs your ",Object(i.b)("inlineCode",{parentName:"li"},"device")," returns. Match with the platforms you're targeting."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mapInputCoordinates"),": (Optional) A mapping function to adjust an input's (x, y) coordinate to its relative value within a Sprite. The ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/web"}),"Web package")," exports this for pointer values."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"initRandom"),": (Optional) An array of numbers that ",Object(i.b)("inlineCode",{parentName:"li"},"random()")," will call, starting from index 0 and looping if it reaches the end. Allows for predictable randomness."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"size"),": (Optional) Set the size parameter passed into Sprites."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"initStore"),": (Optional) Set the init store for local storage."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"networkResponses"),": (Optional) Mock network responses by URL, e.g:")),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  get: {\n    "/api/score": {\n      success: true,\n    },\n  },\n},\n')),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"initAlertResponse"),": (Optional) Set which choice is chosen for OK / cancel alerts. Default ",Object(i.b)("inlineCode",{parentName:"li"},"true"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"nativeSpriteNames"),": (Optional) A list of ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/native-sprites"}),"Native Sprite")," names to mock."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isTouchScreen"),": (Optional) Set the ",Object(i.b)("inlineCode",{parentName:"li"},"isTouchScreen")," parameter."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"throwAssetErrors"),": (Optional) Set if errors are thrown if an asset isn't loaded. Default ",Object(i.b)("inlineCode",{parentName:"li"},"true"),".")))),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"testSprite")," returns an object with the following fields:"),Object(i.b)("h3",{id:"nextframe"},Object(i.b)("inlineCode",{parentName:"h3"},"nextFrame()")),Object(i.b)("p",null,"Increment game by one frame."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"nextFrame();\n")),Object(i.b)("h3",{id:"jumptoframecondition-maxframes"},Object(i.b)("inlineCode",{parentName:"h3"},"jumpToFrame(condition, maxFrames)")),Object(i.b)("h4",{id:"parameters-1"},"Parameters"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"condition"),": A function that can return a boolean or throw an error."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"maxFrames"),": (Optional) Set the maximum number of frames that will run. Default ",Object(i.b)("inlineCode",{parentName:"li"},"1800"),".")),Object(i.b)("p",null,"Asynchronously progress frames of the game until condition is met and no errors are thrown. Condition can also return a Texture (useful for throwing methods like ",Object(i.b)("inlineCode",{parentName:"p"},"getTexture"),"). Rejects if 30 gameplay seconds (1800 frames) pass and condition not met / still errors."),Object(i.b)("p",null,"Note that this will run at almost synchronous speed, but doesn't block the event loop."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"await jumpToFrame(() => props.x > 10);\n")),Object(i.b)("h3",{id:"loadfiles"},Object(i.b)("inlineCode",{parentName:"h3"},"loadFiles()")),Object(i.b)("p",null,"An async function that loads all files specified by Sprites using ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/sprites#init"}),Object(i.b)("inlineCode",{parentName:"a"},"preloadFiles")),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"await loadFiles();\n")),Object(i.b)("h3",{id:"setrandomnumbersarray"},Object(i.b)("inlineCode",{parentName:"h3"},"setRandomNumbers(array)")),Object(i.b)("p",null,"Reset the array of random numbers."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"setRandomNumbers([0.2, 0.3, 0.4]);\n")),Object(i.b)("h3",{id:"updateinputsinputs"},Object(i.b)("inlineCode",{parentName:"h3"},"updateInputs(inputs)")),Object(i.b)("p",null,"Update the input state for the next frame, such as to indicate the pointer is pressed."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"updateInputs({\n  pointer: {\n    pressed: true,\n    justPressed: true,\n    justReleased: false,\n    // Here the pointer position will have the\n    // same coordinates in all Sprites unless\n    // you set mapInputCoordinates\n    x: 0,\n    y: 0,\n  },\n});\n")),Object(i.b)("h3",{id:"gettextures"},Object(i.b)("inlineCode",{parentName:"h3"},"getTextures()")),Object(i.b)("p",null,"Returns an array of textures that were just rendered to the screen."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const textures = getTextures();\n")),Object(i.b)("h3",{id:"gettexturetestid"},Object(i.b)("inlineCode",{parentName:"h3"},"getTexture(testId)")),Object(i.b)("p",null,"Get a Texture with a matching prop ",Object(i.b)("inlineCode",{parentName:"p"},"testId"),". Throws if there are no matches."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const player = getTexture("player");\n')),Object(i.b)("h3",{id:"textureexiststestid"},Object(i.b)("inlineCode",{parentName:"h3"},"textureExists(testId)")),Object(i.b)("p",null,"Boolean of whether a Texture with a ",Object(i.b)("inlineCode",{parentName:"p"},"testId")," prop exists."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'expect(textureExists("player")).toBe(true);\n')),Object(i.b)("h3",{id:"getbytexttext"},Object(i.b)("inlineCode",{parentName:"h3"},"getByText(text)")),Object(i.b)("p",null,"Get an array of text Textures which include text content. Case insensitive. Returns empty array if no matches found."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const scoreLabel = getByText("Score: 10")[0];\n')),Object(i.b)("h3",{id:"log"},Object(i.b)("inlineCode",{parentName:"h3"},"log")),Object(i.b)("p",null,"A Jest mock function to detect if ",Object(i.b)("inlineCode",{parentName:"p"},"log")," was called by a Sprite."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'expect(log).toBeCalledWith("Hello Replay");\n')),Object(i.b)("h3",{id:"audio"},Object(i.b)("inlineCode",{parentName:"h3"},"audio")),Object(i.b)("p",null,"An object of Jest mock functions for testing audio calls."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'expect(audio.play).toBeCalledWith("boop.wav");\n')),Object(i.b)("h3",{id:"network"},Object(i.b)("inlineCode",{parentName:"h3"},"network")),Object(i.b)("p",null,"An object of network mock functions for testing network responses."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"expect(network.get).toBeCalled();\n")),Object(i.b)("h3",{id:"store"},Object(i.b)("inlineCode",{parentName:"h3"},"store")),Object(i.b)("p",null,"A mock local storage store."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"expect(store).toEqual({ highScore: 5 });\n")),Object(i.b)("h3",{id:"alert"},Object(i.b)("inlineCode",{parentName:"h3"},"alert")),Object(i.b)("p",null,"A mock alert object."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'expect(alert.okCancel).toBeCalledWith("Ok or cancel?", expect.any(Function));\n')),Object(i.b)("h3",{id:"updatealertresponseisok"},Object(i.b)("inlineCode",{parentName:"h3"},"updateAlertResponse(isOk)")),Object(i.b)("p",null,"Update whether OK / cancel alert chooses OK or cancel."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"updateAlertResponse(false);\n")),Object(i.b)("h3",{id:"clipboard"},Object(i.b)("inlineCode",{parentName:"h3"},"clipboard")),Object(i.b)("p",null,"A mock clipboard object."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'expect(clipboard.copy).toBeCalledWith("ABCDEFG", expect.any(Function));\n')),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)(o.a,{defaultValue:"js",groupId:"code",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},Object(i.b)(l.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { testSprite } from "@replay/test";\nimport { Game, gameProps } from "..";\n\ntest("Can shoot bullet", async () => {\n  const initInputs = {\n    pointer: {\n      pressed: false,\n      justPressed: false,\n      justReleased: false,\n      x: 0,\n      y: 0,\n    },\n  };\n\n  const {\n    nextFrame,\n    updateInputs,\n    getTexture,\n    textureExists,\n    loadFiles,\n  } = testSprite(Game(gameProps), gameProps, {\n    initInputs,\n  });\n\n  await loadFiles();\n  nextFrame();\n\n  expect(textureExists("bullet")).toBe(false);\n\n  updateInputs({\n    pointer: {\n      pressed: true,\n      justPressed: true,\n      justReleased: false,\n      x: 0,\n      y: 0,\n    },\n  });\n  nextFrame();\n\n  updateInputs(initInputs);\n  nextFrame();\n\n  expect(textureExists("bullet")).toBe(true);\n  expect(getTexture("bullet").props.y).toBe(100);\n});\n'))),Object(i.b)(l.a,{value:"ts",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'import { testSprite } from "@replay/test";\nimport { WebInputs } from "@replay/web";\nimport { iOSInputs } from "@replay/swift";\nimport { Game, gameProps } from "..";\n\ntest("Can shoot bullet", async () => {\n  const initInputs: WebInputs | iOSInputs = {\n    pointer: {\n      pressed: false,\n      justPressed: false,\n      justReleased: false,\n      x: 0,\n      y: 0,\n    },\n  };\n\n  const {\n    nextFrame,\n    updateInputs,\n    getTexture,\n    textureExists,\n    loadFiles,\n  } = testSprite(Game(gameProps), gameProps, {\n    initInputs,\n  });\n\n  await loadFiles();\n  nextFrame();\n\n  expect(textureExists("bullet")).toBe(false);\n\n  updateInputs({\n    pointer: {\n      pressed: true,\n      justPressed: true,\n      justReleased: false,\n      x: 0,\n      y: 0,\n    },\n  });\n  nextFrame();\n\n  updateInputs(initInputs);\n  nextFrame();\n\n  expect(textureExists("bullet")).toBe(true);\n  expect(getTexture("bullet").props.y).toBe(100);\n});\n')))))}u.isMDXComponent=!0}}]);