(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{141:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var i=n(0),a=n.n(i);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,u=d["".concat(o,".").concat(m)]||d[m]||b[m]||r;return n?a.a.createElement(u,l(l({ref:t},s),{},{components:n})):a.a.createElement(u,l({ref:t},s))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},98:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var i=n(2),a=n(6),r=(n(0),n(141)),o={id:"game-size",title:"Game Size"},l={unversionedId:"game-size",id:"game-size",isDocsHomePage:!1,title:"Game Size",description:"Since Replay can deploy to multiple platforms, you likely want your game to work at various dimensions, sizes and orientations. Replay has a few tools to make this easier for you.",source:"@site/docs/game-size.md",permalink:"/docs/game-size",editUrl:"https://github.com/edbentley/replay/edit/master/website/docs/game-size.md",sidebar:"someSidebar",previous:{title:"Device",permalink:"/docs/device"},next:{title:"Game Loop",permalink:"/docs/game-loop"}},c=[{value:"Game Coordinates",id:"game-coordinates",children:[]},{value:"Safe Zone",id:"safe-zone",children:[]},{value:"Orientations",id:"orientations",children:[]},{value:"<code>size</code> Game Prop",id:"size-game-prop",children:[]},{value:"<code>device.size</code>",id:"devicesize",children:[]}],s={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(i.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Since Replay can deploy to multiple platforms, you likely want your game to work at various dimensions, sizes and orientations. Replay has a few tools to make this easier for you."),Object(r.b)("h2",{id:"game-coordinates"},"Game Coordinates"),Object(r.b)("p",null,"Your game must have a fixed ",Object(r.b)("inlineCode",{parentName:"p"},"width")," and ",Object(r.b)("inlineCode",{parentName:"p"},"height"),". This is unitless, not in pixels! You can choose any values you like. When you set the ",Object(r.b)("inlineCode",{parentName:"p"},"position")," of a sprite, you are setting it relative to your width and height. ",Object(r.b)("strong",{parentName:"p"},"The origin (0,0) is in the center of the screen, and the y axis is positive upwards.")),Object(r.b)("p",null,Object(r.b)("img",Object(i.a)({parentName:"p"},{src:"/img/origin.png",alt:"origin diagram"}))),Object(r.b)("h2",{id:"safe-zone"},"Safe Zone"),Object(r.b)("p",null,"Your game can also set a margin beyond the fixed ",Object(r.b)("inlineCode",{parentName:"p"},"width")," and ",Object(r.b)("inlineCode",{parentName:"p"},"height")," to avoid black bars on resolutions that don't match your game's dimensions. Inside the margins is the ",Object(r.b)("em",{parentName:"p"},"safe zone")," where you should render the important visuals in the game. In the margins you can put non-essential visuals like wider backgrounds. Alternatively, you can calculate the total width and height of the device in your ",Object(r.b)("inlineCode",{parentName:"p"},"render")," method and position responsively."),Object(r.b)("p",null,Object(r.b)("img",Object(i.a)({parentName:"p"},{src:"/img/safe-zone.png",alt:"safe zone diagram"}))),Object(r.b)("h2",{id:"orientations"},"Orientations"),Object(r.b)("p",null,"Sprites have multiple ",Object(r.b)("inlineCode",{parentName:"p"},"render")," methods to deal with different orientations and resolutions, as mentioned in ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/sprites"}),"Sprites"),". Only ",Object(r.b)("strong",{parentName:"p"},"one")," ",Object(r.b)("inlineCode",{parentName:"p"},"render")," method will be chosen based on your settings. You don't need to set them for every Sprite, if they're not present Replay will default to using just ",Object(r.b)("inlineCode",{parentName:"p"},"render"),"."),Object(r.b)("h2",{id:"size-game-prop"},Object(r.b)("inlineCode",{parentName:"h2"},"size")," Game Prop"),Object(r.b)("p",null,"Your ",Object(r.b)("a",Object(i.a)({parentName:"p"},{href:"/docs/top-level-game"}),"Top-Level Game")," Sprite accepts a ",Object(r.b)("inlineCode",{parentName:"p"},"size")," prop:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'Game({\n  id: "Game",\n  size: {\n    width: 500,\n    height: 300,\n    minWidthXL: 1000,\n    minHeightXL: 500,\n    maxWidthMargin: 100,\n    maxHeightMargin: 100,\n  },\n})\n')),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"size")," takes the following fields:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"width"),": The width of your game, defines the ",Object(r.b)("inlineCode",{parentName:"li"},"x")," game coordinates."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"height"),": The height of your game, defines the ",Object(r.b)("inlineCode",{parentName:"li"},"y")," game coordinates."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"minWidthXL"),": (Optional) Set this if you want to use the ",Object(r.b)("inlineCode",{parentName:"li"},"renderXL")," methods when the device's width is beyond this value in pixels."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"minHeightXL"),": (Optional) Set this if you want to use the ",Object(r.b)("inlineCode",{parentName:"li"},"renderXL")," methods when the device's height is beyond this value in pixels."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"maxWidthMargin"),": (Optional) Set to allow a margin on the left and right of game in game coordinates (up to this value)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"maxHeightMargin"),": (Optional) Set to allow a margin on the top and bottom of game in game coordinates (up to this value).")),Object(r.b)("p",null,"The example above is for a landscape-only game. If you want portrait-only simply set a height greater than the width."),Object(r.b)("p",null,"If you want to support both landscape and portrait, ",Object(r.b)("inlineCode",{parentName:"p"},"size")," can accept an object with ",Object(r.b)("inlineCode",{parentName:"p"},"portrait")," and ",Object(r.b)("inlineCode",{parentName:"p"},"landscape")," fields like below. The orientation is chosen by Replay automatically."),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'Game({\n  id: "Game",\n  size: {\n    portrait: {\n      width: 300,\n      height: 500,\n      ...\n    },\n    landscape: {\n      width: 500,\n      height: 300,\n      ...\n    }\n  }\n})\n')),Object(r.b)("p",null,"If the screen is landscape, Replay will call ",Object(r.b)("inlineCode",{parentName:"p"},"render")," and ",Object(r.b)("inlineCode",{parentName:"p"},"renderXL")," (if defined). If it's in portrait, Replay will call ",Object(r.b)("inlineCode",{parentName:"p"},"renderP")," or ",Object(r.b)("inlineCode",{parentName:"p"},"renderPXL")," if they're defined instead."),Object(r.b)("h2",{id:"devicesize"},Object(r.b)("inlineCode",{parentName:"h2"},"device.size")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"size")," field in the ",Object(r.b)("inlineCode",{parentName:"p"},"device")," parameter of the Sprite methods contains properties you can use for layout:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"const { size } = device;\n\n// Values passed into game props for current orientation\nsize.width;\nsize.height;\n\n// The margins of the device\n// Will be somewhere between 0 and the max values you set\nsize.widthMargin;\nsize.heightMargin;\n\n// The width and height of the device itself in px\nsize.deviceWidth;\nsize.deviceHeight;\n")),Object(r.b)("p",null,"Here's how you could render a game's score at the top of the screen on all devices:"),Object(r.b)("pre",null,Object(r.b)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'  render({ props, device }) {\n    const topY = device.size.height / 2 + device.size.heightMargin;\n    return [\n      t.text({\n        text: `Score: ${props.score}`,\n        font: { name: "Courier", size: 16 },\n        color: "red",\n        y: topY,\n        anchorY: 8,\n      }),\n    ];\n  },\n')))}p.isMDXComponent=!0}}]);